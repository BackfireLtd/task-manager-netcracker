{"version":3,"sources":["logo.svg","App.js","index.js"],"names":["module","exports","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","dateCast","dateStr","a","Date","arr","split","setFullYear","setHours","dateCastToString","dateO","getFullYear","getDate","slice","getMonth","getHours","getMinutes","App","state","columns","title","field","type","initialEditValue","data","getTasks","bind","fetch","then","response","json","console","log","Object","entries","value","creationDate","dueDate","push","setState","this","style","maxWidth","icons","editable","onRowAdd","newData","body","method","headers","JSON","stringify","onRowUpdate","id","onRowDelete","oldData","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d70ec161.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MaterialTable from \"material-table\";\nimport {forwardRef} from 'react';\n// import {Performance as LocalDateTime} from 'perf_hooks';\n\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\nconst tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref}/>),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref}/>),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref}/>),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref}/>),\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref}/>),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref}/>),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref}/>),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref}/>),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref}/>),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref}/>),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref}/>),\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref}/>),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref}/>),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref}/>),\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref}/>),\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref}/>),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref}/>)\n};\n\nfunction dateCast(dateStr) {\n    let a = new Date();\n    let arr = dateStr.split(' ');\n    a.setFullYear(arr[0], arr[1].split('.')[1], arr[1].split('.')[0]);\n    a.setHours(arr[2].split(':')[0], arr[2].split(':')[1]);\n    return a\n}\n\nfunction dateCastToString(dateO) {\n    if(typeof dateO === \"string\") dateO = new Date(dateO);\n    return `${dateO.getFullYear()} ${(\"0\" + dateO.getDate()).slice(-2)}.${(\"0\" + (dateO.getMonth() + 1)).slice(-2)} ${(\"0\" + dateO.getHours()).slice(-2)}:${(\"0\" + dateO.getMinutes()).slice(-2)}`;\n}\n\nclass App extends React.Component {\n    // state = { data: []}\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [\n                {title: \"Название\", field: \"name\"},\n                {title: \"Описание\", field: \"description\"},\n                {title: \"Дата создания\", field: \"creationDate\", type: \"datetime\", initialEditValue: new Date()},\n                {title: \"Дата выполнения\", field: \"dueDate\", type: \"datetime\"},\n                {title: \"Статус\", field: \"statusId\", initialEditValue: 'In process'}\n            ],\n            data: []\n        }\n        this.getTasks = this.getTasks.bind(this)\n    }\n\n    getTasks() {\n        const URL = 'http://localhost:8080/rest/api/tasks';\n        fetch(URL)\n            .then(response => response.json())\n            .then(data => {\n                console.log(data);\n                let arr = [];\n                for (let [key, value] of Object.entries(data)) {\n                    value.creationDate = dateCast(value.creationDate);\n                    value.dueDate = dateCast(value.dueDate);\n\n                    arr.push(value);\n                }\n                this.setState({data: arr});\n            });\n    }\n\n    componentDidMount() {\n        this.getTasks();\n    }\n\n    render() {\n        return (\n            <div style={{maxWidth: \"100%\"}}>\n                <MaterialTable\n                    title=\"Диспетчер задач\"\n                    columns={this.state.columns}\n                    data={this.state.data}\n                    icons={tableIcons}\n                    editable={{\n                        onRowAdd: newData => {\n                            let body = {...newData};\n\n                            body.dueDate = dateCastToString(body.dueDate);\n                            body.creationDate = dateCastToString(body.creationDate);\n\n                            return fetch('http://localhost:8080/rest/api/tasks', {\n                                method: 'POST',\n                                // mode: 'no-cors',\n                                headers: {\n                                    'Content-Type': 'application/json'\n                                    // 'Content-Type': 'text/plain'\n                                },\n                                body: JSON.stringify(body)\n                            })\n                                // .then(response => response.json())\n                                .then(() => {\n                                    console.log(\"A new task has been added\")\n                                    this.getTasks()\n                                })\n                        },\n                        onRowUpdate: newData => {\n                            let body = {...newData};\n\n                            body.dueDate = dateCastToString(body.dueDate);\n                            body.creationDate = dateCastToString(body.creationDate);\n\n                            return fetch('http://localhost:8080/rest/api/tasks/' + newData.id, {\n                                method: 'PUT',\n\n                                headers: {\n                                    'Content-Type': 'application/json'\n\n                                },\n                                body: JSON.stringify(newData)\n                            })\n                                .then(() => {\n                                    console.log(\"This task has been edited\")\n                                    this.getTasks()\n                                })\n                        },\n                        onRowDelete: oldData =>\n                            fetch('http://localhost:8080/rest/api/tasks/' + oldData.id, {\n                                method: 'DELETE',\n                                // mode: 'no-cors',\n                                // body: oldData.id\n                            })\n                                // .then(response => response.json())\n                                .then(() => {\n                                    console.log(\"This task has been deleted\")\n                                    this.getTasks()\n                                })\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}